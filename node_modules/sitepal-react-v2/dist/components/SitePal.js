"use strict";

require("core-js/modules/es.weak-map.js");
require("core-js/modules/web.dom-collections.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("core-js/modules/es.array.includes.js");
require("core-js/modules/es.string.includes.js");
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const SitePal = props => {
  (0, _react.useEffect)(() => {
    function loadEmbedFile() {
      var sc = document.createElement('script');
      sc.type = "text/javascript";
      sc.src = "//vhss-d.oddcast.com/vhost_embed_functions_v4.php?acc=5626448&js=1";
      sc.onload = function () {
        // callEmebedFunction();
      };
      document.head.appendChild(sc);
    }
    function callEmebedFunction() {
      var interval = setInterval(() => {
        if (typeof AC_VHost_Embed == 'function') {
          clearInterval(interval);
          var script = document.createElement('script');
          script.type = "text/javascript";
          script.innerHTML = "AC_VHost_Embed(".concat(props.embed, ")");
          document.getElementById('sp_embed').appendChild(script);
        }
      }, 10);
    }
    const scripts = document.head.getElementsByTagName('script');
    if (scripts.length > 0) {
      var alreadyAdded = false;
      for (var i = 0; i < scripts.length; i++) {
        if (scripts[i].src.includes("vhost_embed_functions_v4.php")) {
          alreadyAdded = true;
          callEmebedFunction();
        }
        if (scripts.length === i + 1 && !alreadyAdded) {
          loadEmbedFile();
        }
      }
    } else {
      loadEmbedFile();
    }
  }, [props.embed]);
  (0, _react.useEffect)(() => {
    if (props.sayAudio != null) {
      sayAudioFn(props.sayAudio[0], props.sayAudio[1]);
    }
  }, [props.sayAudio]);
  function sayAudioFn() {
    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    //  window.sayAudio(data);
    if (typeof window.sayAudio === 'function') {
      window.sayAudio(data, time);
    } else {
      console.log('window.sayAudio is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.sayText != null) {
      sayTextFn(props.sayText[0], props.sayText[1], props.sayText[2], props.sayText[3], props.sayText[4], props.sayText[5]);
    }
  }, [props.sayText]);
  function sayTextFn() {
    let txt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let voice = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    let lang = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    let engine = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
    let effect = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';
    let effLevel = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';
    // window.sayText(txt,voice,lang,engine);
    if (typeof window.sayText === 'function') {
      window.sayText(txt, voice, lang, engine, effect, effLevel);
    } else {
      console.log('window.sayText is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.setFacialExpression != null) {
      setFacialExpressionFn(props.setFacialExpression[0], props.setFacialExpression[1], props.setFacialExpression[2]);
    }
  }, [props.setFacialExpression]);
  function setFacialExpressionFn() {
    let expression = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let amplitude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    let duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    if (typeof window.setFacialExpression === 'function') {
      window.setFacialExpression(expression, amplitude, duration);
    } else {
      console.log('window.setFacialExpression is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.setIdleMovement != null) {
      setIdleMovementFn(props.setIdleMovement[0], props.setIdleMovement[1]);
    }
  }, [props.setIdleMovement]);
  function setIdleMovementFn() {
    let frequency = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let amplitude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    if (typeof window.setIdleMovement === 'function') {
      window.setIdleMovement(frequency, amplitude);
    } else {
      console.log('window.setIdleMovement is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.setSpeechMovement != null) {
      setSpeechMovementFn(props.setSpeechMovement[0]);
    }
  }, [props.setSpeechMovement]);
  function setSpeechMovementFn() {
    let amplitude = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    if (typeof window.setSpeechMovement === 'function') {
      window.setSpeechMovement(amplitude);
    } else {
      console.log('window.setSpeechMovement is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.followCursor != null) {
      followCursorFn(props.followCursor[0]);
    }
  }, [props.followCursor]);
  function followCursorFn() {
    let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    if (typeof window.followCursor === 'function') {
      window.followCursor(mode);
    } else {
      console.log('window.followCursor is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.freezeToggle != null) {
      freezeToggleFn();
    }
  }, [props.freezeToggle]);
  function freezeToggleFn() {
    if (typeof window.freezeToggle === 'function') {
      window.freezeToggle();
    } else {
      console.log('window.freezeToggle is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.recenter != null) {
      recenterFn();
    }
  }, [props.recenter]);
  function recenterFn() {
    if (typeof window.recenter === 'function') {
      window.recenter();
    } else {
      console.log('window.recenter is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.setGaze != null) {
      setGazeFn(props.setGaze[0], props.setGaze[1], props.setGaze[2]);
    }
  }, [props.setGaze]);
  function setGazeFn() {
    let degrees = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    let amplitude = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    if (typeof window.setGaze === 'function') {
      window.setGaze(degrees, duration, amplitude);
    } else {
      console.log('window.setGaze is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.clearExpressionList != null) {
      clearExpressionListFn();
    }
  }, [props.clearExpressionList]);
  function clearExpressionListFn() {
    if (typeof window.clearExpressionList === 'function') {
      window.clearExpressionList();
    } else {
      console.log('window.clearExpressionList is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.setBlinking != null) {
      setBlinkingFn(props.setBlinking[0]);
    }
  }, [props.setBlinking]);
  function setBlinkingFn() {
    let frequency = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    if (typeof window.setBlinking === 'function') {
      window.setBlinking(frequency);
    } else {
      console.log('window.setBlinking is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.loadAudio != null) {
      loadAudioFn(props.loadAudio[0]);
    }
  }, [props.loadAudio]);
  function loadAudioFn() {
    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    if (typeof window.loadAudio === 'function') {
      window.loadAudio(name);
    } else {
      console.log('window.loadAudio is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.loadText != null) {
      loadTextFn(props.loadText[0], props.loadText[1], props.loadText[2], props.loadText[3], props.loadText[4], props.loadText[5]);
    }
  }, [props.loadText]);
  function loadTextFn() {
    let txt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let voice = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    let lang = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    let engine = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
    let effect = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';
    let effLevel = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';
    if (typeof window.loadText === 'function') {
      window.loadText(txt, voice, lang, engine, effect, effLevel);
    } else {
      console.log('window.loadText is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.sayAI != null) {
      sayAIFn(props.sayAI[0], props.sayAI[1], props.sayAI[2], props.sayAI[3], props.sayAI[4], props.sayAI[5], props.sayAI[6], props.sayAI[7], props.sayAI[8]);
    }
  }, [props.sayAI]);
  function sayAIFn() {
    let txt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let voice = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    let lang = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    let engine = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
    let effect = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';
    let effLevel = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';
    let botVendor = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : '';
    let botName = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : '';
    let resLength = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : '';
    if (typeof window.sayAI === 'function') {
      window.sayAI(txt, voice, lang, engine, effect, effLevel, botVendor, botName, resLength);
    } else {
      console.log('window.sayAI is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.saySilent != null) {
      saySilentFn(props.saySilent[0]);
    }
  }, [props.saySilent]);
  function saySilentFn() {
    let seconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    if (typeof window.saySilent === 'function') {
      window.saySilent(seconds);
    } else {
      console.log('window.saySilent is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.setPlayerVolume != null) {
      setPlayerVolumeFn(props.setPlayerVolume[0]);
    }
  }, [props.setPlayerVolume]);
  function setPlayerVolumeFn() {
    let level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    if (typeof window.setPlayerVolume === 'function') {
      window.setPlayerVolume(level);
    } else {
      console.log('window.setPlayerVolume is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.stopSpeech != null) {
      stopSpeechFn();
    }
  }, [props.stopSpeech]);
  function stopSpeechFn() {
    if (typeof window.stopSpeech === 'function') {
      window.stopSpeech();
    } else {
      console.log('window.stopSpeech is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.replay != null) {
      replayFn();
    }
  }, [props.replay]);
  function replayFn() {
    if (typeof window.replay === 'function') {
      window.replay();
    } else {
      console.log('window.replay is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.getSceneAttributes != null) {
      getSceneAttributesFn();
    }
  }, [props.getSceneAttributes]);
  function getSceneAttributesFn() {
    if (typeof window.getSceneAttributes === 'function') {
      window.getSceneAttributes();
    } else {
      console.log('window.getSceneAttributes is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.setBackground != null) {
      setBackgroundFn(props.setBackground[0]);
    }
  }, [props.setBackground]);
  function setBackgroundFn() {
    let bgName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    if (typeof window.setBackground === 'function') {
      window.setBackground(bgName);
    } else {
      console.log('window.setBackground is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.setBackgroundColor != null) {
      setBackgroundColorFn(props.setBackgroundColor[0]);
    }
  }, [props.setBackgroundColor]);
  function setBackgroundColorFn() {
    let bgColor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    if (typeof window.setBackgroundColor === 'function') {
      window.setBackgroundColor(bgColor);
    } else {
      console.log('window.setBackgroundColor is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.setColor != null) {
      setColorFn(props.setColor[0], props.setColor[1]);
    }
  }, [props.setColor]);
  function setColorFn() {
    let part = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    if (typeof window.setColor === 'function') {
      window.setColor(part, color);
    } else {
      console.log('window.setColor is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.setStatus != null) {
      setStatusFn(props.setStatus[0], props.setStatus[1], props.setStatus[2], props.setStatus[3], props.setStatus[4]);
    }
  }, [props.setStatus]);
  function setStatusFn() {
    let interruptMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let progressInterval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    let gazeSpeed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    let displayControls = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
    let enableLog = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';
    if (typeof window.setStatus === 'function') {
      window.setStatus(interruptMode, progressInterval, gazeSpeed, displayControls, enableLog);
    } else {
      console.log('window.setStatus is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.dynamicResize != null) {
      dynamicResizeFn(props.dynamicResize[0], props.dynamicResize[1]);
    }
  }, [props.dynamicResize]);
  function dynamicResizeFn() {
    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    if (typeof window.dynamicResize === 'function') {
      window.dynamicResize(width, height);
    } else {
      console.log('window.dynamicResize is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.is3D != null) {
      is3DFn();
    }
  }, [props.is3D]);
  function is3DFn() {
    if (typeof window.is3D === 'function') {
      window.is3D();
    } else {
      console.log('window.is3D is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.overlayOpen != null) {
      overlayOpenFn(props.overlayOpen[0], props.overlayOpen[1]);
    }
  }, [props.overlayOpen]);
  function overlayOpenFn() {
    let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let play = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    if (typeof window.overlayOpen === 'function') {
      window.overlayOpen(mode, play);
    } else {
      console.log('window.overlayOpen is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.overlayClose != null) {
      overlayCloseFn();
    }
  }, [props.overlayClose]);
  function overlayCloseFn() {
    if (typeof window.overlayClose === 'function') {
      window.overlayClose();
    } else {
      console.log('window.overlayClose is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.loadSceneByID != null) {
      loadSceneByIDFn(props.loadSceneByID[0], props.loadSceneByID[1]);
    }
  }, [props.loadSceneByID]);
  function loadSceneByIDFn() {
    let sceneID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let slideID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    if (typeof window.loadSceneByID === 'function') {
      window.loadSceneByID(sceneID, slideID);
    } else {
      console.log('window.loadSceneByID is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.unloadScene != null) {
      unloadSceneFn();
    }
  }, [props.unloadScene]);
  function unloadSceneFn() {
    if (typeof window.unloadScene === 'function') {
      window.unloadScene();
    } else {
      console.log('window.unloadScene is not defined.');
    }
  }
  (0, _react.useEffect)(() => {
    if (props.selectPortal != null) {
      selectPortalFn(props.selectPortal[0]);
    }
  }, [props.selectPortal]);
  function selectPortalFn() {
    let portal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    if (typeof window.selectPortal === 'function') {
      window.selectPortal(portal);
    } else {
      console.log('window.selectPortal is not defined.');
    }
  }
  return /*#__PURE__*/_react.default.createElement("div", {
    id: "sp_embed",
    className: "Comment"
  });
};
var _default = SitePal;
exports.default = _default;